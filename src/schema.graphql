type UserSchema {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  status: UserStatus!
  name: String!
}

"""The activity status of user"""
enum UserStatus {
  online
  offline
  busy
  none
  silence
}

type MessageSchema {
  id: ID!
  sender: UserSchema
  message: String!
  unread: Boolean!
  createdAt: String!
}

type ConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

type DirectConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

type GroupConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
  name: String!
  owner: UserSchema!
  visibility: GroupConversationVisibility!
}

"""The visibility mode of the group conversation"""
enum GroupConversationVisibility {
  public
  private
}

type MessagePayloadSchema {
  message: String!
  sender: UserSchema!
  conversation: ConversationSchema!
}

type ErrorMessage {
  path: String!
  message: String!
}

input SendMessageDto {
  conversationId: String!
  message: String!
}

input NewConversationMessageDto {
  conversationId: String!
}

input CreateDirectConversationDto {
  toId: String!
}

input CreateGroupConversationDto {
  name: String!
  visibility: GroupConversationVisibility!
}

input LoginDto {
  email: String!
  password: String!
}

input RegisterDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type Query {
  getConversation(id: String!): ConversationUnion
  getConversations: [ConversationUnion!]!
  me: UserSchema
  hello: String!
}

union ConversationUnion = GroupConversationSchema | DirectConversationSchema

type Mutation {
  sendMessage(data: SendMessageDto!): ErrorMessage
  createDirectConversation(data: CreateDirectConversationDto!): ErrorMessage
  createGroupConversation(data: CreateGroupConversationDto!): ErrorMessage
  login(data: LoginDto!): ErrorMessage
  logout: Boolean
  register(data: RegisterDto!): ErrorMessage
}

type Subscription {
  newConversationMessageAdded(data: NewConversationMessageDto!): MessagePayloadSchema
}
