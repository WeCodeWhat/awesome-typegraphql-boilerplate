type UserSchema {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  status: UserStatus!
  name: String!
}

"""The activity status of user"""
enum UserStatus {
  online
  offline
  busy
  none
  silence
}

type MessageSchema {
  id: ID!
  sender: UserSchema
  message: String!
  unread: Boolean!
  createdAt: String!
}

type ConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

type DirectConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

type GroupConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
  name: String!
  owner: UserSchema!
  visibility: GroupConversationVisibility!
}

"""The visibility mode of the group conversation"""
enum GroupConversationVisibility {
  public
  private
}

type Error {
  path: String!
  message: String!
}

type ChatPayload {
  message: String!
  sender: UserSchema!
  conversation: ConversationSchema!
}

input SendMessageInput {
  conversationId: String!
  message: String!
}

input NewConversationMessageInput {
  conversationId: String!
}

input CreateDirectConversationInput {
  toId: String!
}

input CreateGroupConversationInput {
  name: String!
  visibility: GroupConversationVisibility!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type Query {
  getConversation(id: String!): ConversationUnion
  getConversations: [ConversationUnion!]!
  me: UserSchema
  hello: String!
}

union ConversationUnion = GroupConversationSchema | DirectConversationSchema

type Mutation {
  sendMessage(data: SendMessageInput!): Error
  createGroupConversation(data: CreateGroupConversationInput!): Error
  login(data: LoginInput!): Error
  logout: Boolean
  register(data: RegisterInput!): Error
}

type Subscription {
  newConversationMessageAdded(data: NewConversationMessageInput!): ChatPayload
}
